<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- Pattern Processors -->
	<bean id="messageTranslator" class="com.csc.eip.pattern.MessageTranslator" />
	
	<!-- Custom Aggregation Strategy -->
	<bean id="aggregationStrategy" class="com.csc.eip.strategy.CollectionAggregationStrategy">
		<property name="mergeItemsString" value="${MERGE_ITEMS_INTO_ARRAY}" />
		<property name="addUpItemsString" value="${ADD_UP_ITEMS}" />
		<property name="paramsListString" value="${PARAM_LIST}" />
		<property name="removeFromParentString" value="${REMOVE_FROM_PARENT}" />
		<property name="addTheseItemsFromOptionsString" value="${ADD_ITEMS_FROM_OPTIONS}" />
	</bean>

	<!-- Publish/Subscribe Channel -->
	<bean id="publish" class="com.csc.eip.pattern.PublishSubscribe">
		<property name="factory" ref="connectionFactory" />
	</bean>

	<bean id="configProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:/application.properties</value>
		</property>
	</bean>

	<bean id="connectionFactory" class="com.rabbitmq.client.ConnectionFactory">
		<property name="host" value="${RABBITMQ_HOST}"></property>
		<property name="username" value="${RABBITMQ_USERNAME}"></property>
		<property name="password" value="${RABBITMQ_PASSWORD}"></property>
		<property name="port" value="${RABBITMQ_PORT}"></property>
	</bean>

	<bean id="serviceRouter" class="com.csc.eip.route.ServiceRouter"/>

	<!-- API Proxy Routers -->
	<bean id="apiProxyRouterOmniChannelMiniQuoteAia" class="com.csc.eip.route.ApiProxyRouter">
		<property name="publicUriPrefix" value="https://devgateway.api.csc.com/insurance/omnichannel/miniquote/aia"/>
		<property name="privateUriPrefix" value="https://ec2-52-17-9-134.eu-west-1.compute.amazonaws.com/csc/insurance"/>
		<property name="proxyUriPrefix" value="/aia"/>
		<property name="customHeaders">
			<map>
				<entry key="NSP_USERID" value="gtmoni"/>
			</map>
		</property>
	</bean>
	<!-- duplicate AIA proxy to test aggregation -->
	<bean id="apiProxyRouterOmniChannelMiniQuoteFoo" class="com.csc.eip.route.ApiProxyRouter">
		<property name="publicUriPrefix" value="https://devgateway.api.csc.com/insurance/omnichannel/miniquote/foo"/>
		<property name="privateUriPrefix" value="https://ec2-52-17-9-134.eu-west-1.compute.amazonaws.com/csc/insurance"/>
		<property name="proxyUriPrefix" value="/foo"/>
		<property name="customHeaders">
			<map>
				<entry key="NSP_USERID" value="gtmoni"/>
			</map>
		</property>
	</bean>
	<bean id="apiProxyRouterOmniChannelMiniQuoteIntegral" class="com.csc.eip.route.ApiProxyRouter">
		<property name="publicUriPrefix" value="https://devgateway.api.csc.com/insurance/omnichannel/miniquote/integral"/>
		<property name="privateUriPrefix" value="http://ec2-54-153-183-136.ap-southeast-2.compute.amazonaws.com:80/runtime-web/omni/service"/>
		<property name="proxyUriPrefix" value="/integral"/>
	</bean>

	<bean id="apiProxyRouterOmniChannelMiniQuotePoint" class="com.csc.eip.route.ApiProxyRouter">
		<property name="publicUriPrefix" value="https://devgateway.api.csc.com/insurance/omnichannel/miniquote/point"/>
		<property name="privateUriPrefix" value="http://208.43.105.244:7070/ux-point-api"/>
		<property name="proxyUriPrefix" value="/point"/>
	</bean>

		
	<camelContext id="camelContext" streamCache="true"
		xmlns="http://camel.apache.org/schema/spring">
		<propertyPlaceholder id="properties"
			location="classpath:/application.properties" />

		<!--
		<routeBuilder ref="serviceRouter"/> 
		-->

		<routeBuilder ref="apiProxyRouterOmniChannelMiniQuoteAia"/>
		<routeBuilder ref="apiProxyRouterOmniChannelMiniQuoteFoo"/>
		<routeBuilder ref="apiProxyRouterOmniChannelMiniQuoteIntegral"/>
		<routeBuilder ref="apiProxyRouterOmniChannelMiniQuotePoint"/>

					
		<restConfiguration component="servlet" host="localhost" bindingMode="json">
			<dataFormatProperty key="prettyPrint" value="true" />
		</restConfiguration>

		<rest>
			<description>Message Translator Pattern</description>
			<post uri="/messageTranslator" 
				consumes="application/json" type="com.csc.eip.bo.Message" 
				produces="application/json" outType="com.csc.eip.bo.Message">
				<description>Replace all pattern matches in a JSON message</description>
				<route>
					<log message="/messageTranslator route started"/>
					<log message="Pattern: ${header.Pattern}"/>
					<log message="Replacement: ${header.Replacement}"/>
					<to uri="bean:messageTranslator?method=replacePattern(${body}, ${header.Pattern}, ${header.Replacement})" />
					<log message="/messageTranslator route ended"/>
				</route>
			</post>
		</rest>
		
		<!--
		<rest>
			<description>Header Translator Pattern</description>
			<post uri="/messageTranslatorHeader" 
				consumes="application/json" 
				produces="application/json" >
				<description>Replace all pattern matches in a Header</description>
				<route>
					<log message="/messageTranslatorHeader route started"/>
					<log message="Pattern: ${header.Pattern}"/>
					<log message="Replacement: ${header.Replacement}"/>
					<convertBodyTo type="java.lang.String"/>
					<to uri="bean:messageTranslator?method=replacePatternHeader(${body}, ${header.Pattern}, ${header.Replacement})" />
					<log message="/messageTranslatorHeader route ended"/>
				</route>
			</post>
		</rest>
		-->
		
		<rest>
			<description>Aggregator Pattern</description>
			<get uri="/aggregator" 
				produces="application/json" outType="com.csc.eip.bo.Message">
				<description>Combine the responses from multiple APIs into a single message</description>
				<route>
					<log message="/aggregator route started"/>
					<pipeline>
						<removeHeaders pattern="CamelHttp*"/>
						<setHeader headerName="CamelHttpMethod"><constant>GET</constant></setHeader>
						<enrich><constant>direct:serviceAggregate</constant></enrich>
					</pipeline>
					<log message="/aggregator route ended"/>
				</route>
			</get>
		</rest>

		<rest>
			<description>Publish Subscribe Channel Pattern</description>
			<post uri="/publish" produces="application/json"
				type="com.csc.eip.bo.Message" outType="com.csc.eip.bo.Message">
				<description>Deliver message to multiple consumers who have subscribed for the activity/event</description>
				<route>
					<to
						uri="bean:publish?method=publishMessage(${body}, ${properties:{${header.activity}}}, ${properties:{EXCHANGE_NAME}})" />
				</route>
			</post>
		</rest>

		<rest>
			<description>Pipes and Filter Pattern</description>
			<post uri="/pipeline" produces="application/json"
				type="com.csc.eip.bo.Message" outType="com.csc.eip.bo.Message">
				<description>Processing across multiple independent endpoint instances which are chained together</description>
				<route>
					<pipeline>
						<to
							uri="bean:messageTranslator?method=replacePattern(${body}, ${header.pattern}, ${header.replacement})" />
						<to
							uri="bean:publish?method=publishMessage(${body}, ${properties:{${header.activity}}}, ${properties:{EXCHANGE_NAME}})" />
					</pipeline>
				</route>
			</post>
		</rest>

		<route>
			<from uri="direct:serviceAggregate" />
			<recipientList delimiter="," strategyRef="aggregationStrategy"
				parallelProcessing="true" stopOnException="true">
				<header>RecipientList</header>
			</recipientList>
		</route>

	</camelContext>

</beans>